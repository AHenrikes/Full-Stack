
When the application starts, the code in App is executed.
The code uses a useState hook to create the application state,
 setting an initial value of the variable 'counter' to 0.

The component 
    returns
     the Display component
     and three Button components.

The buttons all have event handlers,
which are used to change the state of the counter.
When one of the buttons is clicked, the event handler is executed.
The event handler changes the state of the 'App' component with the

    setCounter function
    Calling a function that changes the state causes the component to rerender.

So, if a user clicks the button
the button's event handler changes the value of counter
    and the 'App' component is rerendered.

This causes its subcomponents 'Display'
    and Button to also be re-rendered.

Display receives the new value of the counter, as props.

const App = () => {
  const [counter, setCounter] = useState(0)
  console.log('rendering with counter value', counter)

  const increaseByOne = () => {
    console.log('increasing, value before', counter)
    setCounter(counter + 1)
  }

  const decreaseByOne = () => { 
    console.log('decreasing, value before', counter)
    setCounter(counter - 1)
  }

  const setToZero = () => {setCounter(0)}

  return (
    <div>
      <Display counter={counter} />
      <Button handleClick={increaseByOne} text="plus" />
      <Button handleClick={setToZero} text="zero" />
      <Button handleClick={decreaseByOne} text="minus" />
    </div>
  )
} 
